<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player_Idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_Player_Mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables
grav = 0.5 ;       // Gravity Variable
hspd = 0 ;       // Horizontal Speed Variable
vspd = 0 ;       // Vertical Speed Variable
spd = 6 ;        // Speed Variable
jspd = 12 ;      // Jump Variable
onGround = 0;
fuel = room_speed * 10;
max_fuel =  room_speed * 10;
canFly = false;
reFill= false;
dir = 1;

crouch = 0;
move = 0;
maxJump = 2;
image_speed = 0.25;//Animation Speed

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle
//Particle
///Particle System Create
Particle_System = part_system_create();
part_system_depth(Particle_System,1000);

///Particle
Particle_WalkDust = part_type_create();
part_type_shape(Particle_WalkDust, pt_shape_smoke);
part_type_size(Particle_WalkDust, 0.5, 1.5, 0, 0);
part_type_scale(Particle_WalkDust, 0.15,0.15);
part_type_colour3(Particle_WalkDust, c_white, c_gray, c_gray);
part_type_alpha3(Particle_WalkDust, 0.75, 0.50, 0.25);
part_type_speed(Particle_WalkDust, 0.1,0.75, 0, 0);
part_type_direction(Particle_WalkDust, 90, 100, 0, 0);
part_type_gravity(Particle_WalkDust, 0.01, 90);
part_type_orientation(Particle_WalkDust, 0, 0, 0, 0, 1);
part_type_blend(Particle_WalkDust, false);
part_type_life(Particle_WalkDust, 20, 50);

Particle_Emitter = part_emitter_create(Particle_System);
part_emitter_region(Particle_System,Particle_WalkDust,view_xview,view_wview,view_yview,view_hview,ps_shape_ellipse,ps_distr_gaussian);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy   
part_type_destroy(Particle_WalkDust);
part_emitter_destroy_all(Particle_System);
part_system_destroy(Particle_System);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Light Control
if global.Light 
    {
    var yy,size;
    yy = y - 4;
    size = 128 +- irandom(10);
    draw_set_blend_mode(bm_subtract);
    surface_set_target(light);
    draw_ellipse_color(x - size/2 - view_xview,yy - size/2 - view_yview,x + size/2 - view_xview,yy + size/2 - view_yview,c_white,c_black,false);
    surface_reset_target();
    draw_set_blend_mode(bm_normal);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///States
onGround = place_meeting(x , y + 1 , par_solid);
WallOnLeft = place_meeting(x - 1, y , par_solid);
WallOnRight = place_meeting(x + 1, y , par_solid);
canWallSlide = (WallOnLeft || WallOnRight) &amp;&amp; !onGround;

if (canWallSlide)
{
if vspd &gt; 1 vspd = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Platform physics

var ukey = keyboard_check(ord("W")) ;
var dkey = keyboard_check(ord("S")) ;
var rkey = keyboard_check(ord("D")) ;
var lkey = keyboard_check(ord("A")) ;
var fkey = keyboard_check(vk_space) ;
move = rkey - lkey;

/*/Fuel and fly system
if (fuel &gt; 0 &amp;&amp; !reFill)
    {
    canFly = false;
    }
    else 
    {
    canFly = false;
    if (reFill)
      {
      fuel += 1.5;
      if (fuel &gt;= max_fuel)
           {
           fuel  = max_fuel;
           reFill = false;
           }
      }
    }
*/
 // check or the ground 
if(onGround)
  {
    vspd = 0;
    // Jumping on ground
    if(ukey)
       {
        vspd  = -jspd ;
       }
    }
     else {
     if keyboard_check_pressed(ord("W")) 
         {
         if (maxJump &gt; 0)
            vspd  = -jspd ;
            maxJump --;
         }
    // Gravity
    if (vspd &lt; 10)
        {
        vspd += grav ;
        }
        
        //Mid Air Jump
    }
/*        
//Check for not moving
if((!ukey and !dkey) or (ukey and dkey))  {
    vspd = 0 ;
    }
//Moving UP

if(ukey) {
    vspd = -spd ;
    }
*/
// Moving Down
if(dkey)
 {
 vspd = spd ;            
 }
/*Decrease Fuel
fuel -= 1; 
if (fuel == 1)
  {
  reFill = true;
  }       
*/       
    //Moving right
if (move != 0)
   {
   hspd = spd * move;
   }
//Check for not moving
if((!rkey and !lkey) or (rkey and lkey))
   {
   hspd = 0 ;
   }
    
// horizontal collision
if (place_meeting(x+hspd , y ,par_solid))
   {
   //slope movement
   yplus = 0;
   
   //Climb Slope
   while  (place_meeting(x + hspd,y - yplus ,par_solid) &amp;&amp; yplus &lt;= abs(2*hspd))    yplus += 1;
   if (place_meeting(x + hspd,y - yplus ,par_solid))
        {
           ///Only for horizaontal movement
        while (!place_meeting(x+sign(hspd) ,y , par_solid))   x += sign(hspd) ;
        hspd = 0 ;
        } 
    else
    {
     y -= yplus;
    }       
  }
// Move orizontally 
 x += hspd ;


// vertical collision
if(place_meeting(x , y+vspd ,par_solid)) {
    while (!place_meeting(x ,y+sign(vspd) , par_solid)) {
        y += sign(vspd) ;
        }
        vspd = 0 ;  
        maxJump = 3;
   }     
  
// move vertically
 y += vspd ;    
      
//Crouch
crouch = abs(dkey) &amp;&amp; !abs(move) &amp;&amp; onGround;       
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprites animation
if (onGround)
{
if (move != 0) {
    sprite_index = spr_Player_Running;//Running sprite
    }
    else
    {
    sprite_index = spr_Player_Idle;//Idle Sprite
    }
    
if (move != 0)
    {
    image_xscale = sign(hspd) ;
    }
    
if (crouch)
    {
    sprite_index = spr_Player_Crouch;
    }
}    
else
{
if (vspd &gt; 0)
  {
  sprite_index = spr_Player_Jump;
   if (canWallSlide)
       {
       if (WallOnLeft)
           {
             sprite_index = spr_Player_Slide; 
             image_xscale = 1; 
           }
       if (WallOnRight)
           {
             sprite_index = spr_Player_Slide; 
             image_xscale = -1;  
           } 
       }
   }
   else
   {      
    sprite_index = spr_Player_Jump;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle Creation

var s,xx,dir;
s = 4;
xx = bbox_left;
if (canWallSlide)
{

if (WallOnLeft)
    {
    xx = bbox_left;
    }

if (WallOnRight)
    {
    xx = bbox_right;
    }
    part_emitter_region(Particle_System,Particle_Emitter,xx,xx,bbox_top,bbox_bottom,ps_shape_rectangle,ps_distr_linear);
    part_emitter_burst(Particle_System,Particle_WalkDust,Particle_Emitter,1);    
}

if (onGround &amp;&amp; move != 0)
    {
    part_emitter_region(Particle_System,Particle_Emitter,bbox_left,bbox_right,bbox_bottom,bbox_bottom,ps_shape_rectangle,ps_distr_linear);
    part_emitter_burst(Particle_System,Particle_WalkDust,Particle_Emitter,1);
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug
if (onGround)
    {
    show_debug_message("On Ground");
    }
    else
    {
    if (canWallSlide)
        {
        if (WallOnLeft)
            {
            show_debug_message("Wall Sliding -- Left");
            }
            else
            {
            show_debug_message("Wall Sliding -- Right");        
            }
        }
        else
        {
        show_debug_message("In Air");         
        }
    }


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>425</id>
        <kind>4</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RESTART
instance_destroy();
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
draw_self();
/*var hp;
hp = (fuel/(room_speed * 15)) * 100;
//draw_healthbar(view_xview + 64,view_yview + 16,view_xview + 256,view_yview + 32,hp,c_dkgray,c_red,c_green,-180,true,true);

draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1);
if (image_xscale == 1)
    {
    draw_rectangle(bbox_left,bbox_top,bbox_left - abs(bbox_right - bbox_left),bbox_bottom,1);
    }
    else
    {
    draw_rectangle(bbox_right,bbox_top,bbox_right + abs(bbox_left - bbox_right),bbox_bottom,1);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
